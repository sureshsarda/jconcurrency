/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jconcurrency;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

/**
 * Two threads should meet each other at a point and only then should proceed further.
 */
public class Rendezvous {
    
    public static void main(String[] args) throws Exception {
        // var semaphoreA = new Semaphore(1);
        // var semaphoreB = new Semaphore(1);
        // var tA = new WorkThread(semaphoreA, semaphoreB);
        // var tB = new WorkThread(semaphoreB, semaphoreA);

        ExecutorService executor = Executors.newFixedThreadPool(2);
        // executor.submit(tA);
        // executor.submit(tB);

        // executor.shutdown();

        CountDownLatch latch = new CountDownLatch(2);
        executor = Executors.newFixedThreadPool(2);
        executor.submit(new WorkThreadCountDownLatch(latch));
        executor.submit(new WorkThreadCountDownLatch(latch));

        executor.shutdown();

    }
}

class WorkThreadCountDownLatch implements Runnable {

    CountDownLatch latch;

    public WorkThreadCountDownLatch(CountDownLatch latch) {
        this.latch = latch;
    }

    @Override
    public void run() {
        System.out.println("Independent Work");

        latch.countDown();

        try {
            latch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Work after Rendezvous");

    }
}

class WorkThread implements Runnable {

    Semaphore waitOn;
    Semaphore notifyOther;

    public WorkThread(Semaphore waitOn, Semaphore notifyOther) throws InterruptedException {
        this.waitOn = waitOn;
        this.notifyOther = notifyOther;
        this.notifyOther.acquire();
    }

    @Override
    public void run() {
        System.out.println("Independent Work...");
        notifyOther.release();

        try {
            waitOn.acquire();    
        } catch (Exception e) {
            System.err.println(e);
            e.printStackTrace();
        }
        
        System.out.println("Work after Rendezvous");
    }

}
